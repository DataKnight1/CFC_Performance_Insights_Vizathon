import Link from "next/link"
import Image from "next/image"
import AnimatedBackground from "../components/animated-background"
import { ExportButtons } from "../components/export-buttons"
import { PlayerDataTable } from "../components/player-data-table"
import { PlayerLoadVisualization } from "../components/player-load-visualization"
import { fetchPlayerData, getUniquePlayers, getPlayerTotalGames } from "../utils/player-data"
import { InfoTooltip } from "../components/info-tooltip"
import { PlayerProfile } from "../components/player-profile"
import { TeamOverviewDashboard } from "../components/team-overview-dashboard"

export default async function LoadDemand() {
  // Fetch player data
  const playerData = await fetchPlayerData()

  // Get unique players for filters
  const players = ["All Players", ...getUniquePlayers(playerData)]

  return (
    <div className="min-h-screen flex flex-col relative">
      {/* Background Image */}
      <div className="absolute inset-0 z-0">
        <Image
          src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Bring_your_boots_tour_2025_header-s6bQPBCt2XFNbuZXnTP1CH2zcSEnnq.webp"
          alt="Chelsea FC Stadium"
          fill
          priority
          className="object-cover object-center"
        />
        <div className="absolute inset-0 bg-[#070E16]/80"></div>
      </div>

      {/* Animated Lines Overlay */}
      <AnimatedBackground />

      <header className="container mx-auto py-6 px-4 z-10">
        <div className="flex justify-between items-center">
          <Link href="/" className="flex items-center">
            <Image
              src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Logo-SvkMVEyEGNlML3C7t85UPpuMulsAEO.png"
              alt="Chelsea FC Logo"
              width={40}
              height={40}
              className="mr-3"
            />
            <span className="text-white text-lg font-bold">CFC Vizathon</span>
          </Link>
          <nav>
            <ul className="hidden md:flex space-x-6">
              <li>
                <Link href="/load-demand" className="text-[#1E54B7] font-medium">
                  Load Demand
                </Link>
              </li>
              <li>
                <Link href="/injury-history" className="text-white hover:text-[#1E54B7] transition-colors">
                  Injury History
                </Link>
              </li>
              <li>
                <Link href="/physical-development" className="text-white hover:text-[#1E54B7] transition-colors">
                  Physical Development
                </Link>
              </li>
              <li>
                <Link href="/biography" className="text-white hover:text-[#1E54B7] transition-colors">
                  Biography
                </Link>
              </li>
              <li>
                <Link href="/recovery" className="text-white hover:text-[#1E54B7] transition-colors">
                  Recovery
                </Link>
              </li>
              <li>
                <Link href="/external-factors" className="text-white hover:text-[#1E54B7] transition-colors">
                  External Factors
                </Link>
              </li>
            </ul>
            <button className="md:hidden text-white">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <line x1="4" x2="20" y1="12" y2="12" />
                <line x1="4" x2="20" y1="6" y2="6" />
                <line x1="4" x2="20" y1="18" y2="18" />
              </svg>
            </button>
          </nav>
        </div>
      </header>

      <main className="flex-grow container mx-auto px-4 py-12 z-10">
        <div className="max-w-6xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <h1 className="text-3xl font-bold text-white">Load Demand</h1>
            <div className="mt-4 md:mt-0 flex items-center space-x-4">
              <ExportButtons data={playerData} filename="player_load_data.csv" buttonText="Export Data" />
            </div>
          </div>

          <PlayerDataClientWrapper playerData={playerData} players={players} />
        </div>
      </main>

      <footer className="py-6 z-10">
        <div className="container mx-auto px-4">
          <div className="flex justify-center">
            <p className="text-gray-400 text-sm">
              Â© {new Date().getFullYear()} Chelsea Football Club. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  )
}
// Client components
;("use client")

import { useState, useEffect } from "react"

function PlayerDataClientWrapper({
  playerData,
  players,
}: {
  playerData: any[]
  players: string[]
}) {
  const [player, setPlayer] = useState("All Players")
  const [selectedPlayerData, setSelectedPlayerData] = useState<any | null>(null)
  const [totalMatches, setTotalMatches] = useState(0)
  const [showTable, setShowTable] = useState(false)

  useEffect(() => {
    if (player && player !== "All Players") {
      // Find the first record for the selected player to display in the profile
      const playerRecord = playerData.find((item) => item.player === player)
      setSelectedPlayerData(playerRecord)

      // Calculate total matches for the player
      const totalGames = getPlayerTotalGames(playerData, player)
      setTotalMatches(totalGames)

      // Debug log
      console.log(`Selected player: ${player}`)
      console.log(
        `Player data:`,
        playerData.filter((item) => item.player === player),
      )
    } else {
      setSelectedPlayerData(null)
      setTotalMatches(0)
    }
  }, [player, playerData])

  // Helper function
  function getPlayerTotalGames(data: any[], playerName: string): number {
    return data
      .filter((item) => item.player === playerName)
      .reduce((total, item) => total + (Number.parseInt(item.games) || 0), 0)
  }

  return (
    <>
      <div className="mb-8">
        <label className="block text-sm font-medium text-gray-300 mb-2">Player</label>
        <select
          className="w-full md:w-1/3 bg-gray-800 text-white border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[#1E54B7]"
          value={player}
          onChange={(e) => setPlayer(e.target.value)}
        >
          {players.map((p) => (
            <option key={p} value={p}>
              {p}
            </option>
          ))}
        </select>
      </div>

      {player === "All Players" ? (
        <>
          <TeamOverviewDashboard data={playerData} />

          <div className="mt-8 flex justify-end">
            <button
              onClick={() => setShowTable(!showTable)}
              className="bg-gray-800 text-white px-4 py-2 rounded-md text-sm hover:bg-gray-700 transition-colors"
            >
              {showTable ? "Hide Full Data Table" : "Show Full Data Table"}
            </button>
          </div>

          {showTable && (
            <div className="mt-6">
              <PlayerDataTable data={playerData} player={player} />
            </div>
          )}
        </>
      ) : (
        <>
          {selectedPlayerData && (
            <div className="mb-8">
              <PlayerProfile player={selectedPlayerData} />
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-1 gap-6 mb-8">
            <div className="bg-gray-900 bg-opacity-70 backdrop-blur-sm p-6 rounded-lg border border-gray-800">
              <div className="flex items-center">
                <h3 className="text-lg font-medium text-white mb-2">Total Matches</h3>
                <InfoTooltip text="This value is calculated from the player's actual data." />
              </div>
              <p className="text-4xl font-bold text-[#1E54B7]">{totalMatches}</p>
              <p className="text-gray-400 text-sm mt-2">Career total</p>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-1 gap-8 mb-8">
            <PlayerLoadVisualization data={playerData} player={player} />
          </div>

          <div className="mb-8">
            <PlayerDataTable data={playerData} player={player} />
          </div>
        </>
      )}
    </>
  )
}

